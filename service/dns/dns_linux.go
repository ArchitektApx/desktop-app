package dns

import (
	"fmt"
	"net"
	"os"
)

var (
	resolvFile       string = "/etc/resolv.conf"
	resolvBackupFile string = "/etc/resolv.conf.ivpnsave"

	manualDNS net.IP = nil
)

func implPause() error {
	return implDeleteManual(nil)
}

func implResume() error {
	if manualDNS == nil {
		return implDeleteManual(nil)
	}

	return implSetManual(manualDNS, nil)
}

// Set manual DNS.
// 'addr' parameter - DNS IP value
// 'localInterfaceIP' - not in use for macOS implementation
func implSetManual(addr net.IP, localInterfaceIP net.IP) error {
	if addr == nil {
		return implDeleteManual(nil)
	}

	if _, err := os.Stat(resolvBackupFile); err != nil {
		// if no backup exists - create backup of DNS configuration

		if _, err := os.Stat(resolvFile); err == nil {
			// if DNS-config exists
			if err := os.Rename(resolvFile, resolvBackupFile); err != nil {
				return fmt.Errorf("failed to backup DNS configuration: %w", err)
			}
		}
	}

	out, err := os.OpenFile(resolvFile, os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return fmt.Errorf("failed to update DNS configuration (%w)", err)
	}

	if _, err := out.WriteString(fmt.Sprintln(fmt.Sprintf("# resolv.conf autogenerated by '%s'\n\nnameserver %s", os.Args[0], addr.String()))); err != nil {
		return fmt.Errorf("failed to change DNS configuration: %w", err)
	}

	if err := out.Sync(); err != nil {
		return fmt.Errorf("failed to change DNS configuration: %w", err)
	}

	manualDNS = addr

	return nil
}

// DeleteManual - reset manual DNS configuration to default
// 'localInterfaceIP' (obligatory only for Windows implementation) - local IP of VPN interface
func implDeleteManual(localInterfaceIP net.IP) error {
	if _, err := os.Stat(resolvBackupFile); err != nil {
		// nothing to restore
		return nil
	}

	if err := os.Rename(resolvBackupFile, resolvFile); err != nil {
		return fmt.Errorf("failed to restore DNS configuration: %w", err)
	}

	return nil
}
